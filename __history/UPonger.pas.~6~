unit UPonger;

interface

uses
  System.SysUtils, System.Types, System.UITypes, System.Classes,
  System.Variants,
  FMX.Types, FMX.Controls, FMX.Forms, FMX.Graphics, FMX.Dialogs, FMX.Objects;

type
  TGameWindow = class(TForm)
    ball: TRoundRect;
    PaddleL: TRoundRect;
    PaddleR: TRoundRect;
    clock: TTimer;

    procedure clockTimer(Sender: TObject);
    procedure FormCreate(Sender: TObject);
  private
    BallX, BallY: integer;
    procedure bounce(ball: TRoundRect);
    { Private declarations }
  public
    { Public declarations }
  end;

const
  movspeed: integer = 10;

var
  GameWindow: TGameWindow;

implementation

{$R *.fmx}

procedure TGameWindow.clockTimer(Sender: TObject);
begin
  ball.Position.X := ball.Position.X + BallX;
  ball.Position.Y := ball.Position.Y + BallY;

  bounce(ball);
end;

procedure TGameWindow.bounce(ball: TRoundRect);
var
  paddleLMid, paddleRMid: integer;
begin
  { Bounce on horizontal bars }
  if (ball.Position.Y < 0) or
    ((ball.Position.Y + ball.Height) > GameWindow.Height) then
    BallY := -BallY;

  { Bounce on the paddles }

  paddleLMid := PaddleL.Position.Y + (PaddleL.Height / 2);
  paddleRMid := PaddleR.Position.Y + (PaddleR.Height / 2);

  if ball.Position.X < PaddleL.Width then
  begin
    if (ball.Position.Y > PaddleL.Position.Y) and
      (ball.Position.Y < (PaddleL.Position.Y + PaddleL.Height)) then

  end;

  procedure TGameWindow.FormCreate(Sender: TObject);
  begin
    BallX := 5;
    BallY := 5;
  end;

end.
